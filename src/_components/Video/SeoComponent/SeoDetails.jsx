import React, { Component } from "react";

//Services
import { apiCalls } from "../../../_services/common.service";

//Helper Files
import Config from "../../../Config/config";
import { constantText } from "../../../_helpers/constants.text";
import FormRender from "../../Common/FormHelper/FormRender";
import checkValidity from "../../Common/FormHelper/FieldValidator";
import {
  formValidityCheck
} from "../../Common/FormHelper/FormValidSetter";

import Lock from "../../Common/Locked/Locked";
import LockedPopup from "../LockedPopup";
import { DEFAULT_JSON } from "../../../_helpers/util";
import MarkDone from "../../../../public/images/tick.svg";
import BadgeBox from "../../Common/BadgeBox/BadgeBox";

class SeoDetails extends Component {
  constructor(props) {
    super(props);
    let { state } = props;
    const {jsonData}= props;
    this.state = {
      JSONSchema: DEFAULT_JSON(jsonData),
      contentId: null,
      identifyTab: state,
      action: "UnPublished",
      formIsValid: false,
      readyToDone: true,
      isUpdate: false,
      showStatePopup: false,
      status: null,
    };
  }
  componentDidMount() {
    let { contentId } = this.props;
    this.setState({ contentId: contentId || null }, this.generateUrlStructure);
  }
  generateUrlStructure = async () => {
    const { contentId, JSONSchema, identifyTab } = this.state;
    const copyJSON = [...JSONSchema];
    const url = `${Config.videoProperties}/${contentId}`;
    const response = await apiCalls(url, "GET", {});
    if (response) {
      let videoName = response?.title?.toLowerCase().split(" ").join("-");
      videoName = videoName.replace(constantText.seoSefUrlRegex, '');
      let externalId = response?.externalId;
      let autoGeneratedUrl = `${Config.videoSefUrl}/${videoName}/${externalId}`;
      const findIndex = copyJSON.findIndex((item) => item?.name === "sefUrl");
      const findIndexOfCanonicalUrl = copyJSON?.findIndex(
        (item) => item?.name === "canonicalUrl"
      );
      copyJSON[findIndex].helperText = `${Config.seoDomainName}`;
      await this.fillSeoDetails();
      if (copyJSON[findIndex].value === "") {
        copyJSON[findIndex].value = autoGeneratedUrl;
        copyJSON[findIndex].touched = 1;
        await this.autoSave(findIndex);
      }
      if (identifyTab === undefined) {
        copyJSON[
          findIndexOfCanonicalUrl
        ].helperText = `${Config.seoDomainName}`;
        if (copyJSON[findIndexOfCanonicalUrl].value === "") {
          copyJSON[findIndexOfCanonicalUrl].value = autoGeneratedUrl;
          copyJSON[findIndex].touched = 1;
          await this.autoSave(findIndexOfCanonicalUrl);
        }
      }
      this.setState({ JSONSchema: copyJSON });
    }
  };
  fillSeoDetails = async () => {
    const { contentId, JSONSchema } = this.state;
    const url = `${Config.video.videoSeo}/${contentId}`;
    const response = await apiCalls(url, "GET", {});
    if (response) {
      const contentData = response;
      const copyJSON = [...JSONSchema];
      copyJSON.forEach((item) => {
        if (item.name === "redirectionType") {
          const value = contentData.RedirectionType;
          item.value =
            item.type === "dropdownAsync"
              ? value === ""
                ? null
                : value
              : value || "";
          item.touched = 0;
        } else {
          const value = contentData[item?.name];
          item.value =
            item.type === "dropdownAsync"
              ? value === ""
                ? null
                : value
              : value || "";
          item.touched = 0;
        }
      });
      const { formValidity } = formValidityCheck(copyJSON);
      let updateObj = {
        formIsValid: formValidity,
        JSONSchema: copyJSON,
      };
      updateObj = {
        formIsValid: formValidity,
        JSONSchema: copyJSON,
      };
      this.setState(updateObj, this.checkIfMarkAsDone);
    }
  };
  setSelectDataArr = (res, index) => {
    const copySelect = [...this.state.JSONSchema];
    if(copySelect) {
      copySelect[index].data = res;
    }
    this.setState({ filters: copySelect });
  };

  removeLock = async () => {
    this.showHideStatePopup();
    this.props.unLockedSession(this.props?.selectedTab);
  };

  markAsDone = async () => {
    this.props.markAsDone(this.props?.selectedTab, true);
  };

  handleMarkAsDone = (mode) => {
    this.props.markAsDone(this.props?.selectedTab, mode);
  };

  autoSave = async (elemIndex) => {
    const { JSONSchema } = this.state;
    const copyJSON = [...JSONSchema];
    const updatedElement = copyJSON[elemIndex];
    if (updatedElement?.touched && updatedElement.valid) {
      const { contentId } = this.state;
      const url = `${Config.video.videoSeo}/${contentId}`;
      const putData = {};
      const findIndex = copyJSON.findIndex((item) => item?.name === "sefUrl");
      const findIndexOfCanonicalUrl = copyJSON?.findIndex(
        (item) => item?.name === "canonicalUrl"
      );
      if (updatedElement?.name === "redirectionType") {
        putData[updatedElement?.name] = updatedElement?.value.id;
        putData["sefUrl"] = copyJSON[findIndex]?.value;
        putData["canonicalUrl"] = copyJSON[findIndexOfCanonicalUrl]?.value
      } else {
        putData[updatedElement?.name] = updatedElement?.value;
        putData["sefUrl"] = copyJSON[findIndex]?.value;
        putData["canonicalUrl"] = copyJSON[findIndexOfCanonicalUrl]?.value
      }
      this.checkIfMarkAsDone(); // check if mark as done or not
      const responseData = await apiCalls(
        url,
        "PUT",
        putData,
        null,
        false,
        false,
        this.props.autoSaveError
      );
      updatedElement.touched = 0;
      this.setState({ isUpdate: true, JSONSchema: copyJSON });
      this.props.markAsDone(this.props?.selectedTab, false);
    }
  };
  InputChanger = (event, elemIndex) => {
    let { status } = this.state;
    if (status === constantText.collectionConstants.published) {
      this.setState({ status: constantText.castProfile.changed });
    }
    if (
      status === constantText.contentConstants.unpublished ||
      status === constantText.contentConstants.scheduled ||
      status === constantText.contentConstants.needWork
    ) {
      this.setState({ status: constantText.contentConstants.draft });
    }
    const copyJSON = [...this.state.JSONSchema];
    const updatedElement = copyJSON[elemIndex];
    if (updatedElement.type === "file") {
      updatedElement.value = event.target.value;
      updatedElement.file = event.target.files[0];
    } else {
      updatedElement.value = event.target.value;
    }
    const { isValid, errorText } = checkValidity(
      updatedElement.value,
      updatedElement.validation,
      false
    );
    updatedElement.valid = isValid;
    updatedElement.errorText = errorText;
    updatedElement.touched = 1;
    copyJSON[elemIndex] = { ...copyJSON[elemIndex], value: event.target.value }; //new code
    this.setState({ JSONSchema: copyJSON }, () => {
      if (updatedElement.type === "checkbox") {
        this.autoSave(elemIndex);
      }
    });
  };

  showHideStatePopup = () => {
    const { showStatePopup } = this.state;
    this.setState({
      showStatePopup: !showStatePopup,
    });
  };
  checkIfMarkAsDone = () => {
    const form = [...this.state.JSONSchema];
    let formIsValid = true;
    let elementValid = true;
    form.forEach((element) => {
      if (element?.validation?.required !== false) {
        let { isValid } = checkValidity(element.value, element.validation);
        elementValid = isValid;
        if (
          element.value === false ||
          element.value === null ||
          element.value === ""
        ) {
          elementValid = isValid && false;
        }
        formIsValid = elementValid && formIsValid;
      }
    });
    this.setState({ readyToDone: formIsValid });
  };

  render() {
    const { JSONSchema, readyToDone, showStatePopup } = this.state;
    let { currentTabData, stage } = this.props;
    let { isDone, isLocked, lockedBy } = currentTabData;

    return (
      <Lock
        lock={isLocked}
        lockedBy={lockedBy}
        clicked={this.showHideStatePopup}
      >
        <div className="whitebox">
          <div className="drag-drop-wrap">
            <div className="ccm-head flex align-items-center justify-content-between">
              <h4>{constantText.seo_details_text}</h4>
              <div className="status-head flex align-items-center">
                {stage?.title && (
                  <BadgeBox
                    className="create-video-stage"
                    status={stage?.title}
                    dot={true}
                  />
                )}
                <div className="autosave">
                  {constantText.all_fields_auto_save_text}
                </div>
                <div
                  onClick={() =>
                    readyToDone && !isDone && !isLocked ? this.markAsDone() : {}
                  }
                  disabled={isLocked}
                  className={`mark-done ${
                    isDone
                      ? "mark-active"
                      : readyToDone
                      ? "mark-fill-active"
                      : ""
                  } auto-mark-done`}
                >
                  <span>
                    <MarkDone />
                  </span>
                  {constantText.mark_as_done_text}
                </div>
              </div>
            </div>
            <div className="col-12">
              <div className="row input-space-35">
                <FormRender
                  data-test="seo-inputchanger"
                  form={JSONSchema}
                  onChange={this.InputChanger}
                  handleBlur={this.autoSave}
                  setSelectDataArr={this.setSelectDataArr}
                  serverCall={true}
                  isDisable={isLocked}
                />
              </div>
            </div>
          </div>
        </div>
        <LockedPopup
          className="popup-wrap status-popup"
          state={showStatePopup}
          lockedBy={lockedBy}
          doneAction={this.removeLock}
          cancelAction={this.showHideStatePopup}
        />
      </Lock>
    );
  }
}

const mapStateToProps = (state) => {
  return {};
};

const actionCreators = {};
export default SeoDetails;
