import React, { Component } from "react";

//Services
import { apiCalls } from "../../../_services/common.service";

//Helper Files
import Config from "../../../Config/config";
import { constantText } from "../../../_helpers/constants.text";
import FormRender from "../../Common/FormHelper/FormRender";
import LeftTab from '../../Common/LeftTab/CommonLeftTab';
import checkValidity from "../../Common/FormHelper/FieldValidator";
import {formValidityCheck} from "../../Common/FormHelper/FormValidSetter";

import Lock from "../../Common/Locked/Locked";
import LockedPopup from "../LockedPopup";

import { DEFAULT_JSON, getSelectedGroup } from "../../../_helpers/util";
import MarkDone from "images/tick.svg";
import BadgeBox from "../../Common/BadgeBox/BadgeBox";
import AccordianNormal from "images/arrow-icon.svg";
import { CommonModel } from "../../Common/Model/CommonModel";


//css
import "../../../../public/css/Common/GlobalField.css";

class SeoDetails extends Component {
  constructor(props) {
    super(props);
    let { state, jsonData } = props;
    this.state = {
      JSONSchema: DEFAULT_JSON(state ? jsonData : jsonData?.SeoJson) || [],
      JSONSchemaGlobal:
        DEFAULT_JSON(state? jsonData: jsonData?.globalProperties
        ) || [],
      tvShowId: null,
      allGlobalData: [],
      updateId: [],
      tabData: constantText.tvshow_seo_header_arr,
      selectedTab: 0,
      identifyTab: state,
      action: "UnPublished",
      tvShowTitle: null,
      formIsValid: false,
      readyToDone: true,
      isUpdate: false,
      showStatePopup: false,
      status: null,
      showModelForCountry: false,
    };
  }
  async componentDidMount() {
    this.fetchContentData()
    let { tvShowId } = this.props;
    this.setState({ tvShowId: tvShowId || null });
    let shallowArr = []
    await shallowArr.push(JSON.parse(JSON.stringify([...this.state.JSONSchemaGlobal])))
    this.setState({ allGlobalData: shallowArr });
  }

  fetchContentData = async () => {
    let { tvShowId } = this.props;
    let response = await apiCalls(`${Config.tvShowProperties}/${tvShowId}`, "GET", {});
    if (response) {
      this.setState({status: response?.contentState?.title})
      this.generateUrlStructure(response)
    }
  };

  generateUrlStructure = async (response = null) => {
    const { JSONSchema, identifyTab } = this.state;
    const copyJSON = [...JSONSchema];
    if (response) {
      let tvShowName =  response?.title?.toLowerCase().split(" ").join("-");
          tvShowName =   tvShowName.replace(constantText.seoSefUrlRegex, '');
      let externalId = response?.externalId;
      const autoGeneratedUrl = `${Config.tvShowSefUrl}/${tvShowName}/${externalId}`;
      const findIndex = copyJSON.findIndex((item) => item?.name === "sefUrl");
      const findIndexOfCanonicalUrl = copyJSON?.findIndex(
        (item) => item?.name === "canonicalUrl"
      );
      copyJSON[findIndex].helperText = `${Config.seoDomainName}`;
      await this.fillSeoDetails();
      await this.fillSeoDetailsGlobal();
      if (copyJSON[findIndex].value === "") {
        copyJSON[findIndex].value = autoGeneratedUrl;
        copyJSON[findIndex].touched = 1;
      }
      if (identifyTab === undefined) {
        copyJSON[findIndexOfCanonicalUrl].helperText = `${Config.seoDomainName}`;
        if (copyJSON[findIndexOfCanonicalUrl].value === "") {
          copyJSON[findIndexOfCanonicalUrl].value = autoGeneratedUrl;
          copyJSON[findIndex].touched = 1;
        }
      }
      this.setState({ JSONSchema: copyJSON });
    }
  };

  fillSeoDetails = async () => {
    const { tvShowId, JSONSchema } = this.state;
    const url = `${Config.tvShow.seo}/${tvShowId}`;
    const response = await apiCalls(url, "GET", {});
    if (response) {
      const contentData = response;
      const copyJSON = [...JSONSchema];
      copyJSON.forEach((item) => {
        if (item.name === "redirectionType") {
          const value = contentData.RedirectionType;
          item.value =
            item.type === "dropdownAsync"
              ? value === ""
                ? null
                : value
              : value || "";
          item.touched = 0;
        } else {
          const value = contentData[item?.name];
          item.value =
            item.type === "dropdownAsync"
              ? value === ""
                ? null
                : value
              : value || "";
          item.touched = 0;
        }
      });
      const { formValidity } = formValidityCheck(copyJSON);
      let updateObj = {
        formIsValid: formValidity,
        JSONSchema: copyJSON,
      };
      this.setState(updateObj, this.checkIfMarkAsDone);
    }
  };

    fillSeoDetailsGlobal = async () => {
      let { tvShowId, allGlobalData, JSONSchemaGlobal, updateId } = this.state;
      const url = `${Config.tvShow.global}/${tvShowId}?type=seo`;
      const responseAll = await apiCalls(url, "GET", {});

      let allGlobalDataCopy = (responseAll?.length > 0) ? responseAll?.map((dataObj) => JSONSchemaGlobal?.map(obj => (
        { ...obj, value: dataObj?.[obj?.name] || obj["value"] }
        ))) : allGlobalData;
       let updateIdCopy = (responseAll?.length > 0) ? responseAll?.map((data, indexItem)=> updateId[indexItem] = data.id): updateId
      this.setState({allGlobalData: allGlobalDataCopy, updateId: updateIdCopy})
    };

  setSelectDataArr = (res, index) => {
    const {JSONSchema} = this.state;
      if(JSONSchema){
        const copySelect = [...JSONSchema];
        if(copySelect){
          copySelect[index].data = res;
          this.setState({ filters: copySelect });
        }
       
      }
    
  };

  setSelectDataArrGlobal = (res, index, rootIndex) => {
    const copyJSONGlobal = [...this.state.allGlobalData];
    const updatedElement = copyJSONGlobal[rootIndex][index];
    if (updatedElement.name === "country") {
      const GroupName = [];
      res?.forEach((group) => {
        group?.countries?.forEach((item) => {
          const obj = { ...item };
          obj.group = group?.title;
          GroupName.push(obj);
        });
      });
      updatedElement.data = GroupName || [];
    } else {
      updatedElement.data = res || [];
    }
    this.setState({ allGlobalData: copyJSONGlobal });
  };

  selectGroup = (event, group, rootIndex) => {
    const { allGlobalData } = this.state;
    const copyLicense = [...allGlobalData];
    const copyRoot = copyLicense[rootIndex];
    if(copyRoot){
      const copyElement =  copyRoot[0];
      const copyOptions = [...copyElement.data];
      copyElement.value = getSelectedGroup(event, group, copyOptions, copyElement?.value);
      this.setState({
        allGlobalData: copyLicense
      });
    }
    
  };

  removeLock = async () => {
    this.showHideStatePopup();
    this.props.unLockedSession(this.props?.selectedTab);
  };

  markAsDone = async () => {
    this.props.markAsDone(this.props?.selectedTab, true);
  };

  handleMarkAsDone = (mode) => {
    this.props.markAsDone(this.props?.selectedTab, mode);
  };

  autoSave = async (elemIndex) => {
    const { JSONSchema } = this.state;
    const copyJSON = [...JSONSchema];
    const updatedElement = copyJSON[elemIndex];
    if (updatedElement?.touched && updatedElement.valid) {
      const { tvShowId } = this.state;
      const url = `${Config.tvShow.seo}/${tvShowId}`;
      const putData = {};
      const findIndex = copyJSON.findIndex((item) => item?.name === "sefUrl");
      const findIndexOfCanonicalUrl = copyJSON?.findIndex(
        (item) => item?.name === "canonicalUrl"
      );
      if (updatedElement?.name === "redirectionType") {
        putData[updatedElement?.name] = updatedElement?.value.id;
        putData["sefUrl"] = copyJSON[findIndex]?.value;
        putData["canonicalUrl"] = copyJSON[findIndexOfCanonicalUrl]?.value
      } else {
        putData[updatedElement?.name] = updatedElement?.value;
        putData["sefUrl"] = copyJSON[findIndex]?.value;
        putData["canonicalUrl"] = copyJSON[findIndexOfCanonicalUrl]?.value
      }
      this.checkIfMarkAsDone(); // check if mark as done or not
      await apiCalls( url, "PUT", putData, null, false, false, this.props.autoSaveError );
      updatedElement.touched = 0;
      this.setState({ isUpdate: true, JSONSchema: copyJSON });
      this.props.markAsDone(this.props?.selectedTab, false);
    }
  };

  InputChanger = (event, elemIndex) => {
    let { status } = this.state;
    if (status === constantText.contentConstants.published) {
      this.setState({ status: constantText.contentConstants.changed })
    }
    if (status === constantText.contentConstants.submittedToReview){
      this.setState({ status:constantText.contentConstants.draft })
    }
    if (status === constantText.contentConstants.unpublished) {
      this.setState({ status:constantText.contentConstants.draft })
    }
    const copyJSON = [...this.state.JSONSchema];
    const updatedElement = copyJSON[elemIndex];
    if (updatedElement.type === "file") {
      updatedElement.value = event.target.value;
      updatedElement.file = event.target.files[0];
    } else {
      updatedElement.value = event.target.value;
    }
    const { isValid, errorText } = checkValidity(
      updatedElement.value,
      updatedElement.validation,
      false
    );
    updatedElement.valid = isValid;
    updatedElement.errorText = errorText;
    updatedElement.touched = 1;
    copyJSON[elemIndex] = { ...copyJSON[elemIndex], value: event.target.value }; //new code
    this.setState({ JSONSchema: copyJSON }, () => {
      this.checkIfMarkAsDone();
      this.handleMarkAsDone(false);
      if (updatedElement.type === "checkbox") {
        this.autoSave(elemIndex);
      }
    });
  };

  autoSaveGlobal = async (index, rootIndex, sectionName) => {
    const copyJSONGlobal = [...this.state[sectionName]];
    const updatedElement = copyJSONGlobal[rootIndex][index];
      const { tvShowId, updateId } = this.state;
      const putData = {};
      putData[updatedElement?.name] = updatedElement?.name === "redirectionType" ?  updatedElement?.value?.id : updatedElement?.value
      if(updatedElement.name === 'country'){
        putData[updatedElement?.name] = updatedElement.value.map(data => data.id);
      }
      this.checkIfMarkAsDone(); // check if mark as done or not
      let response
      let checkCountryEmpty = this.state.allGlobalData[rootIndex][0].value
      if(checkCountryEmpty?.length !== 0){
        if(updateId?.length === 0){
          response = await apiCalls( Config.tvShow.global +'/'+ tvShowId, "PUT", putData, null, false, false, this.props.autoSaveError );
        } else {
          putData["id"] = updateId[rootIndex]
          response = await apiCalls( Config.tvShow.global +'/'+ tvShowId, "PUT", putData, null, false, false, this.props.autoSaveError );
        }
        if(response !== null){
          updateId[rootIndex] = response.id
          this.setState({ updateId})
        }
        updatedElement.touched = 0;
        this.setState({ isUpdate: true, allGlobalData: copyJSONGlobal });
        this.props.markAsDone(this.props?.selectedTab, false);
      } else {
        this.showHideCountryPopup()
      }
  };



  InputChangerGlobal = async(event, rootIndex, index, sectionName) => {
    let { value } = event.target;
    let stepNameArr = this.state[sectionName].slice();
    let shallowArr = [...stepNameArr];
    if (rootIndex != null) {
      let rootArr = [...shallowArr[rootIndex]];
      let { type, validation } = rootArr[index];
      let { errorText } = checkValidity(value, validation, false)
      rootArr[index] = { ...rootArr[index], value, errorText };
      shallowArr[rootIndex] = rootArr;
      this.checkIfMarkAsDone();
      this.handleMarkAsDone(false);
      if(rootArr[0]?.value?.length !== 0){
        this.setState(prevState => ({ [sectionName]: shallowArr }), () => {
          if (type === "checkbox" || type === "dropdown") {
            this.autoSaveGlobal(index, rootIndex, sectionName);
         }
        });
      } else {
        this.showHideCountryPopup()
      }
    }
    else {
      let { type, validation } = shallowArr[index];
      let { errorText } = checkValidity(value, validation, false)
      shallowArr[index] = { ...shallowArr[index], value, errorText };
      this.setState(prevState => ({ [sectionName]: shallowArr }));
    }
  };

  showHideStatePopup = () => {
    const { showStatePopup } = this.state;
    this.setState({
      showStatePopup: !showStatePopup,
    });
  };

  checkIfMarkAsDone = () => {
    const form = [...this.state.JSONSchema];
    let formIsValid = true;
    let elementValid = true;
    form.forEach((element) => {
      let { isValid } = checkValidity(element.value, element.validation);
      elementValid = isValid;
      formIsValid = elementValid && formIsValid;
    });
    this.setState({ readyToDone: formIsValid });
  };

  addRemoveMultipleFields = async(globalIndex) => {
    let { allGlobalData, JSONSchemaGlobal } = this.state;
    const copyGlobalData = [...allGlobalData];
    if (globalIndex > 0) {
      if(this.state.updateId[globalIndex] === null || this.state.updateId[globalIndex] === undefined){
        copyGlobalData.splice(globalIndex, 1);
      }
    } else {
      copyGlobalData.push(JSONSchemaGlobal)
    }
    this.setState({ allGlobalData: copyGlobalData });
  };

  handleTab = (event, selectedTab) => {
    const tabData = [...this.state.tabData]
    this.setState({ selectedTab, tabData })
  };
  showHideCountryPopup = () => {
    const { showModelForCountry } = this.state;
    this.setState({showModelForCountry: !showModelForCountry})
  }

  render() {
    let { tabData, showModelForCountry, selectedTab, JSONSchema, readyToDone, showStatePopup, status, JSONSchemaGlobal,
      allGlobalData } = this.state;
    let { currentTabData } = this.props;
    let { isDone, isLocked, lockedBy } = currentTabData;

    return (
      <div className="create-movie">
      <Lock
        lock={isLocked}
        lockedBy={lockedBy}
        clicked={this.showHideStatePopup}
      >
        <div className="whitebox m-b-30">
          <div className="drag-drop-wrap">
            <div className="ccm-head flex align-items-center justify-content-between m-b-0">
              <h4>{constantText.seo_details_text}</h4>
              <div className="status-head flex align-items-center">
                {status && (
                  <BadgeBox
                    className="create-movie-stage"
                    status={status}
                  />
                )}
                <div className="autosave">
                  {constantText.all_fields_auto_save_text}
                </div>
                <div
                  onClick={() =>
                    readyToDone &&  !isDone && !isLocked ? this.markAsDone() : {}
                  }
                  disabled={isLocked}
                  className={
                    isDone
                      ? "mark-done mark-active auto-mark-done"
                      : readyToDone
                      ? "mark-done mark-fill-active auto-mark-done"
                      : "mark-done auto-mark-done"
                  }
                >
                  <span>
                    <MarkDone />
                  </span>
                  {constantText.mark_as_done_text}
                </div>
              </div>
            </div>
            <div className="cr-mov-tab p-b-30">
              <LeftTab className="tabs" orientation="horizontal" variant="scrollable" options={tabData}
                data-test="handle-tab-method" selectedTab={selectedTab} showIcon={false} handleChange={this.handleTab} />
            </div>
            {(selectedTab == 0) &&
              <div className="col-12">
                <div className="row input-space-35">
                  <FormRender
                    data-test="testTvShowSeo"
                    form={JSONSchema}
                    onChange={this.InputChanger}
                    handleBlur={this.autoSave}
                    setSelectDataArr={this.setSelectDataArr}
                    serverCall={true}
                    isDisable={isLocked}
                  />
                </div>
              </div>
            }
            {(selectedTab == 1) &&
              <div className="movie-f-wrap col-12">
                  <div className="global-wrap">
                      {allGlobalData?.map((globalGroupFields, globalIndex) => (
                       <div className="global-row" key={globalIndex}>
                              <div className={JSONSchemaGlobal.length > 1 ? "add-plush-row top-title" : ""}>
                                  <div className="top-text">
                                    {`${constantText.global_fields_SEO} ${globalIndex >= 0 ? ` - ${globalIndex + 1}` : ''}`}
                                  </div>
                                  <div className="add-another-f-btn create-btn">
                                   {(globalGroupFields?.length !== 0) &&
                                    <div className={`${globalIndex > 0 ? 'remove-btn auto-remove-btn' : 'auto-add-btn'} add-btn-field flex align-items-center`}
                                      onClick={() => this.addRemoveMultipleFields(globalIndex)}>
                                      <span className="plush-icon-btn"></span>
                                    </div>
                                    }
                                  </div>
                              </div>

                            <div className="row input-space-35">
                              <FormRender
                                data-test="testTvShowSeo"
                                form={allGlobalData[globalIndex]}
                                onChange={(event, index) => this.InputChangerGlobal(event, globalIndex, index, 'allGlobalData')}
                                handleBlur={(event, index) => this.autoSaveGlobal(event, globalIndex, 'allGlobalData')}
                                selectGroup={(event, group) =>this.selectGroup (event, group, globalIndex )}
                                setSelectDataArr={(res, index) => this.setSelectDataArrGlobal(res, index, globalIndex )}
                                serverCall={true}
                                isDisable={isLocked}
                              />
                          </div>
                      </div>
                    ))}
                </div>

              </div>
            }
          </div>
        </div>
      </Lock>
      <CommonModel
          className="popup-wrap status-popup"
          state={showModelForCountry}
          showTitle={true}
          title={constantText.error_text}
          showIcon={false}
          showDes={true}
          des={constantText.country_required}
          showBtn1={false}
          showBtn2={true}
          btn2Text={constantText.ok_text}
          btn2Action={() => this.showHideCountryPopup()}
          handleClose={() => this.showHideCountryPopup()}
        />

      <LockedPopup
          className="popup-wrap status-popup"
          state={showStatePopup}
          lockedBy={lockedBy}
          doneAction={this.removeLock}
          cancelAction={this.showHideStatePopup}
        />
      </div>
    );
  }
}

export default SeoDetails;
